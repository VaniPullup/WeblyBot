#admin.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db import get_all_leads, search_leads
import asyncio
import sqlite3
from db import DB_PATH


admin_router = Router()

class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_search_query = State()
    waiting_for_status_change_id = State()
    waiting_for_new_status = State()
    waiting_for_clear_confirm = State()
    waiting_for_reply_text = State()

STATUS_MAP = {
    "new": "–Ω–æ–≤–∞—è",
    "in_progress": "–≤ —Ä–∞–±–æ—Ç–µ",
    "done": "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
}

@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != int(message.bot.admin_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÇ –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="view_leads"),
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞—è–≤–∫–∏", callback_data="clear_leads")
        ],
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞—è–≤–∫–∞–º", callback_data="search_leads")],
        [InlineKeyboardButton(text="üì• –ó–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="filter_by_status")],
        [InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data="change_status")],
        [InlineKeyboardButton(text="üì§ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_admin")]
    ])

    await message.answer("<b>üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@admin_router.callback_query(F.data == "clear_leads")
async def ask_clear_confirm(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_leads"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_leads")
        ]
    ])
    await state.set_state(AdminStates.waiting_for_clear_confirm)
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏?", reply_markup=kb)
    await callback.answer()

@admin_router.callback_query(F.data == "confirm_clear_leads")
async def clear_all_leads(callback: CallbackQuery, state: FSMContext):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM leads")
    conn.commit()
    conn.close()
    await state.clear()
    await callback.message.answer("üóë –í—Å–µ –∑–∞—è–≤–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()

@admin_router.callback_query(F.data == "cancel_clear_leads")
async def cancel_clear(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

@admin_router.callback_query(F.data == "close_admin")
async def close_admin_menu(callback: CallbackQuery):
    await callback.message.delete()

@admin_router.callback_query(F.data == "view_leads")
async def view_all_leads(callback: CallbackQuery):
    leads = get_all_leads()
    if not leads:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    for lead in leads:
        await send_lead(callback.message, lead)

@admin_router.callback_query(F.data == "search_leads")
async def ask_search_query(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_search_query)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.answer()

@admin_router.message(AdminStates.waiting_for_search_query)
async def do_search(message: Message, state: FSMContext):
    await state.clear()
    query = message.text.strip()
    results = search_leads(query)
    if not results:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    for lead in results:
        await send_lead(message, lead)

@admin_router.callback_query(F.data == "broadcast")
async def ask_broadcast_text(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_broadcast)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await callback.answer()

@admin_router.message(AdminStates.waiting_for_broadcast)
async def do_broadcast(message: Message, state: FSMContext):
    await state.clear()
    text = message.text
    leads = get_all_leads()
    unique_ids = set(lead[5] for lead in leads)
    sent, failed = 0, 0
    for uid in unique_ids:
        try:
            await message.bot.send_message(uid, text)
            await asyncio.sleep(0.05)
            sent += 1
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]: {e}")
            failed += 1
    await message.answer(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")

@admin_router.callback_query(F.data == "filter_by_status")
async def show_status_filter(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –ù–æ–≤—ã–µ", callback_data="status_new")],
        [InlineKeyboardButton(text="üõ† –í —Ä–∞–±–æ—Ç–µ", callback_data="status_in_progress")],
        [InlineKeyboardButton(text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ", callback_data="status_done")]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=kb)

@admin_router.callback_query(F.data.startswith("status_"))
async def show_leads_by_status(callback: CallbackQuery):
    status = STATUS_MAP[callback.data.replace("status_", "")]
    leads = get_all_leads()
    filtered = [l for l in leads if l[6] == status]
    if not filtered:
        await callback.message.answer(f"–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
        return
    for lead in filtered:
        await send_lead(callback.message, lead)

@admin_router.callback_query(F.data == "change_status")
async def ask_for_id_to_change(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_status_change_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID –∑–∞—è–≤–∫–∏</b> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", parse_mode="HTML")
    await callback.answer()

@admin_router.message(AdminStates.waiting_for_status_change_id)
async def get_lead_and_choose_status(message: Message, state: FSMContext):
    await state.update_data(change_lead_id=message.text.strip())
    leads = get_all_leads()
    lead = next((l for l in leads if str(l[0]) == message.text.strip()), None)
    if not lead:
        await state.clear()
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await send_lead(message, lead)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –ù–æ–≤–∞—è", callback_data="setstatus_new")],
        [InlineKeyboardButton(text="üõ† –í —Ä–∞–±–æ—Ç–µ", callback_data="setstatus_in_progress")],
        [InlineKeyboardButton(text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞", callback_data="setstatus_done")]
    ])
    await state.set_state(AdminStates.waiting_for_new_status)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=kb)

@admin_router.callback_query(F.data.startswith("setstatus_"))
async def set_new_status(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lead_id = data.get("change_lead_id")
    new_status = STATUS_MAP[callback.data.replace("setstatus_", "")]
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE leads SET status = ? WHERE id = ?", (new_status, lead_id))
    conn.commit()
    conn.close()
    await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ID {lead_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: <b>{new_status}</b>", parse_mode="HTML")
    await state.clear()
    await callback.answer()

@admin_router.callback_query(F.data.startswith("assign_"))
async def assign_lead(callback: CallbackQuery):
    lead_id = callback.data.replace("assign_", "")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE leads SET status = ? WHERE id = ?", ("–≤ —Ä–∞–±–æ—Ç–µ", lead_id))
    conn.commit()
    conn.close()
    leads = get_all_leads()
    lead = next((l for l in leads if str(l[0]) == lead_id), None)
    if not lead:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    text = (
        f"<b>üÜî ID –∑–∞—è–≤–∫–∏:</b> {lead[0]}\n"
        f"<b>–ò–º—è:</b> {lead[1]}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {lead[2]}\n"
        f"<b>–ö—É—Ä—Å:</b> {lead[3]}\n"
        f"<b>Telegram:</b> @{lead[4]}\n"
        f"<b>User ID:</b> <code>{lead[5]}</code>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> <code>–≤ —Ä–∞–±–æ—Ç–µ</code>\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {lead[7]}\n"
        f"<b>–î–∞—Ç–∞:</b> {lead[8]}"
    )
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer("üõ† –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '–≤ —Ä–∞–±–æ—Ç–µ'")

@admin_router.callback_query(F.data.startswith("replyto_"))
async def start_reply(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.replace("replyto_", ""))
    await state.update_data(reply_user_id=user_id)
    await state.set_state(AdminStates.waiting_for_reply_text)
    await callback.message.answer(
        f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b>\n"
        f"–°–µ–π—á–∞—Å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–º—É –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.",
        parse_mode="HTML"
    )
    await callback.answer()


@admin_router.message(AdminStates.waiting_for_reply_text)
async def send_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_user_id")
    try:
        await message.bot.send_message(chat_id=user_id, text=message.text)
        await message.answer("‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.</b>", parse_mode="HTML")
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.</b>\n"
            f"<code>{e}</code>",
            parse_mode="HTML"
        )
    await state.clear()

from db import get_all_ratings

@admin_router.callback_query(F.data == "show_stats")
async def show_stats_callback(callback: CallbackQuery):
    if callback.from_user.id != int(callback.bot.admin_id):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    ratings = get_all_ratings()
    if not ratings:
        await callback.message.answer("–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫.")
        await callback.answer()
        return

    stats = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
    for _, rate in ratings:
        stats[rate] += 1

    text = "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫ –±–æ—Ç–∞:</b>\n"
    for i in range(1, 6):
        text += f"{i}‚≠ê ‚Äî <b>{stats[i]}</b>\n"

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()



async def send_lead(destination, lead):
    text = (
        f"<b>üÜî ID –∑–∞—è–≤–∫–∏:</b> {lead[0]}\n"
        f"<b>–ò–º—è:</b> {lead[1]}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {lead[2]}\n"
        f"<b>–ö—É—Ä—Å:</b> {lead[3]}\n"
        f"<b>Telegram:</b> @{lead[4]}\n"
        f"<b>User ID:</b> <code>{lead[5]}</code>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> <code>{lead[6]}</code>\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {lead[7]}\n"
        f"<b>–î–∞—Ç–∞:</b> {lead[8]}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"replyto_{lead[5]}")]
    ])
    await destination.answer(text, parse_mode="HTML", reply_markup=kb)

