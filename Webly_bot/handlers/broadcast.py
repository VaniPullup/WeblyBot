#broadcast.py
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from db import get_all_leads
import asyncio

class BroadcastStates(StatesGroup):
    waiting_for_message = State()

broadcast_router = Router()

@broadcast_router.message(Command("—Ä–∞—Å—Å—ã–ª–∫–∞"))
async def start_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != int(message.bot.admin_id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await state.set_state(BroadcastStates.waiting_for_message)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@broadcast_router.message(BroadcastStates.waiting_for_message)
async def send_broadcast(message: Message, state: FSMContext):
    await state.clear()
    text = message.text
    users = get_all_leads()

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ user_id
    unique_ids = set()
    for user in users:
        unique_ids.add(user[5])  # user_id ‚Äî —ç—Ç–æ 6-–π —Å—Ç–æ–ª–±–µ—Ü

    sent, failed = 0, 0

    for uid in unique_ids:
        try:
            await message.bot.send_message(uid, text)
            await asyncio.sleep(0.05)
            sent += 1
        except Exception as e:
            failed += 1
            print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]: {e}")

    await message.answer(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")
