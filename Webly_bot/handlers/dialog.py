from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import ADMIN_ID

dialog_router = Router()

class DialogStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_admin_reply = State()
    admin_reply_user_id = State()

@dialog_router.message(F.text == "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É")
async def ask_user_message(message: Message, state: FSMContext):
    await state.set_state(DialogStates.waiting_for_message)
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

@dialog_router.message(DialogStates.waiting_for_message)
async def forward_to_admin(message: Message, state: FSMContext):
    user = message.from_user
    user_id = user.id
    text = message.text

    msg = (
        f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
        f"<b>–ò–º—è:</b> {user.full_name}\n"
        f"<b>Username:</b> @{user.username or '‚Äî'}\n"
        f"<b>User ID:</b> <code>{user_id}</code>\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{text}"
    )

    reply_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"replyto_{user_id}")]
    ])

    try:
        await message.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode="HTML", reply_markup=reply_kb)
        await message.answer("‚úÖ –¢–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω—É]: {e}")

    await state.clear()

@dialog_router.callback_query(F.data.startswith("replyto_"))
async def start_reply(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.replace("replyto_", ""))
    await state.update_data(admin_reply_user_id=user_id)
    await state.set_state(DialogStates.waiting_for_admin_reply)
    await callback.message.answer("üí¨ –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
    await callback.answer()

@dialog_router.message(DialogStates.waiting_for_admin_reply)
async def send_admin_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("admin_reply_user_id")
    try:
        await message.bot.send_message(chat_id=user_id, text=message.text)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É.")
        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É]: {e}")
    await state.clear()
