#form.py
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message

from db import save_lead
from keyboards.menu import main_kb, back_to_main_kb
from states.form_states import FormStates


async def handle_form_input(message: Message, state: FSMContext, admin_id: int):
    current_state = await state.get_state()

    if current_state == FormStates.name:
        await state.update_data(name=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_to_main_kb)
        await state.set_state(FormStates.phone)
        return

    if current_state == FormStates.phone:
        await state.update_data(phone=message.text)
        await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª.",
                             reply_markup=back_to_main_kb)
        await state.set_state(FormStates.comment)
        return

    if current_state == FormStates.comment:
        await state.update_data(comment=message.text)
        data = await state.get_data()

        log_msg = (f"[–ó–ê–Ø–í–ö–ê]\n–ö—É—Ä—Å: {data.get('course')}\n–ò–º—è: {data.get('name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                   f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}")
        print(log_msg)

        msg = (
            f"\U0001F4C9 <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!</b>\n\n"
            f"\U0001F393 <b>–ö—É—Ä—Å:</b> {data.get('course')}\n"
            f"\U0001F464 <b>–ò–º—è:</b> {data.get('name')}\n"
            f"\U0001F4DE <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone')}\n"
            f"\U0001F517 <b>Telegram:</b> @{message.from_user.username or '‚Äî'}\n"
            f"\U0001F194 <b>User ID:</b> <code>{message.from_user.id}</code>\n"
            f"\U0001F4CC <b>–°—Ç–∞—Ç—É—Å:</b> <code>–Ω–æ–≤–∞—è</code>\n"
            f"\U0001F4AC <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {data.get('comment')}"
        )

        try:
            save_lead({
                "name": data.get("name"),
                "phone": data.get("phone"),
                "course": data.get("course"),
                "telegram": message.from_user.username or "‚Äî",
                "user_id": message.from_user.id,
                "comment": data.get("comment")
            })
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–ê–ó–£]: {e}")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        import sqlite3
        from db import DB_PATH
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM leads WHERE user_id = ? ORDER BY id DESC LIMIT 1", (message.from_user.id,))
        result = cursor.fetchone()
        conn.close()
        lead_id = result[0] if result else None

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë∑ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"assign_{lead_id}")]
        ])


        await message.bot.send_message(chat_id=admin_id, text=msg, reply_markup=kb)
        await message.answer(
            "üéâ <b>–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É.</b>\n"
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∫—É—Ä—Å—ã üëá",
            parse_mode="HTML",
            reply_markup=main_kb
        )

        await message.answer(
            "üìö –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=main_kb
        )

        try:
            save_lead({
                "name": data.get("name"),
                "phone": data.get("phone"),
                "course": data.get("course"),
                "telegram": message.from_user.username or "‚Äî",
                "user_id": message.from_user.id,
                "comment": data.get("comment")
            })
        except Exception as e:
            print(f"[–û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–ê–ó–£]: {e}")

        await state.clear()
        return


async def handle_back_button(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)


async def handle_form_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)
